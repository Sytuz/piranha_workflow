piranha.workflowedit=new Vue({el:"#workflowedit",data:{loading:!0,id:null,title:"",description:"",stages:[],availableRoles:[],saveUrl:piranha.baseUrl+"manager/api/workflow/save",rolesUrl:piranha.baseUrl+"manager/api/workflow/roles",originalTitle:null},methods:{bind:function(e){this.id=e.id,this.title=e.title,this.originalTitle=e.title,this.description=e.description,this.stages=(e.stages||[]).map((function(e){return{id:e.id,title:e.title,description:e.description,roleIds:(e.roles||[]).map((function(e){return e.roleId}))||[]}})),this.loading=!1},load:function(e){var t=this;e&&(t.id=e,fetch(piranha.baseUrl+"manager/api/workflow/"+e).then((function(e){if(!e.ok)throw new Error("Response status: "+e.status);return e.json()})).then((function(e){t.bind(e)})).catch((function(e){console.log("Error loading workflow:",e),piranha.notifications.push({body:"Failed to load workflow. Please try again.",type:"danger",hide:!0})})))},create:function(){this.id=null,this.title="",this.description="",this.stages=[],this.stages.push({id:piranha.utils.generateId(),title:"Draft",description:"Initial draft stage",roleIds:[]}),this.stages.push({id:piranha.utils.generateId(),title:"Review",description:"Content review stage",roleIds:[]}),this.stages.push({id:piranha.utils.generateId(),title:"Published",description:"Final published stage",roleIds:[]}),this.loading=!1},save:function(){var e=this;if(""!==e.title)if(0!==e.stages.length){for(var t=0;t<e.stages.length;t++)if(!e.stages[t].title)return void piranha.notifications.push({body:"Please enter a title for all stages",type:"danger",hide:!0});e.loading=!0;var i={id:e.id,title:e.title,description:e.description,stages:e.stages.map((function(e){return{id:e.id,title:e.title,description:e.description,roles:(e.roleIds||[]).map((function(e){return{roleId:e}}))}}))};fetch(e.saveUrl,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)}).then((function(e){return e.ok?e.json():e.json().then((function(e){throw e}))})).then((function(t){e.id=t.id,e.originalTitle=t.title,piranha.notifications.push({body:"The workflow has been saved",type:"success",hide:!0}),e.loading=!1,i.id||(window.location=piranha.baseUrl+"manager/workflow/edit/"+t.id)})).catch((function(t){console.log("Error saving workflow:",t),piranha.notifications.push({body:t.body||"An error occurred while saving the workflow",type:"danger",hide:!0}),e.loading=!1}))}else piranha.notifications.push({body:"Please add at least one stage to the workflow",type:"danger",hide:!0});else piranha.notifications.push({body:"Please enter a title for the workflow",type:"danger",hide:!0})},addStage:function(){this.stages.push({id:piranha.utils.generateId(),title:"",description:"",roleIds:[]})},removeStage:function(e){this.stages.splice(e,1)},moveStageUp:function(e){if(e>0){const t=this.stages[e];this.stages.splice(e,1),this.stages.splice(e-1,0,t)}},moveStageDown:function(e){if(e<this.stages.length-1){const t=this.stages[e];this.stages.splice(e,1),this.stages.splice(e+1,0,t)}},updateStageRoles:function(e,t){},toggleStageRole:function(e,t,i){if(e.roleIds||(e.roleIds=[]),i.target.checked)e.roleIds.includes(t)||e.roleIds.push(t);else{const i=e.roleIds.indexOf(t);i>-1&&e.roleIds.splice(i,1)}},loadRoles:function(){var e=this;fetch(this.rolesUrl).then((function(e){if(!e.ok)throw new Error("Failed to load roles");return e.json()})).then((function(t){e.availableRoles=t})).catch((function(e){console.log("Error loading roles:",e),piranha.notifications.push({body:"Failed to load available roles",type:"warning",hide:!0})}))}},created:function(){},mounted:function(){this.loadRoles()},updated:function(){if(!this.loading){var e=this;sortable(".sortable",{handle:".handle",items:".sortable-item",placeholderClass:"sortable-placeholder"}),document.querySelector(".sortable").addEventListener("sortupdate",(function(t){var i=t.detail.origin.index,s=t.detail.destination.index;if(i!==s){var o=e.stages.splice(i,1)[0];e.stages.splice(s,0,o)}}));for(var t=document.querySelectorAll(".sortable-item"),i=0;i<t.length;i++)t[i].setAttribute("data-index",i)}}});