piranha.workflowedit=new Vue({el:"#workflowedit",data:{loading:!0,id:null,title:"",description:"",stages:[],availableRoles:[],saveUrl:piranha.baseUrl+"manager/api/workflow/save",rolesUrl:piranha.baseUrl+"manager/api/workflow/roles",originalTitle:null},methods:{bind:function(t){this.id=t.id,this.title=t.title,this.originalTitle=t.title,this.description=t.description,this.stages=(t.stages||[]).map((function(t){return{id:t.id,title:t.title,description:t.description,roleIds:(t.roles||[]).map((function(t){return t.roleId}))||[]}})),this.loading=!1},load:function(t){var e=this;t&&(e.id=t,fetch(piranha.baseUrl+"manager/api/workflow/"+t).then((function(t){if(!t.ok)throw new Error("Response status: "+t.status);return t.json()})).then((function(t){e.bind(t)})).catch((function(t){console.log("Error loading workflow:",t),piranha.notifications.push({body:"Failed to load workflow. Please try again.",type:"danger",hide:!0})})))},create:function(){this.id=null,this.title="",this.description="",this.stages=[],this.stages.push({id:piranha.utils.generateId(),title:"Draft",description:"Initial draft stage",roleIds:[]}),this.stages.push({id:piranha.utils.generateId(),title:"Review",description:"Content review stage",roleIds:[]}),this.stages.push({id:piranha.utils.generateId(),title:"Published",description:"Final published stage",roleIds:[]}),this.loading=!1},save:function(){var t=this;if(""!==t.title)if(0!==t.stages.length){for(var e=0;e<t.stages.length;e++)if(!t.stages[e].title)return void piranha.notifications.push({body:"Please enter a title for all stages",type:"danger",hide:!0});t.loading=!0;var i={id:t.id,title:t.title,description:t.description,stages:t.stages.map((function(t){return{id:t.id,title:t.title,description:t.description,roles:(t.roleIds||[]).map((function(e){return{id:piranha.utils.generateId(),workflowStageId:t.id,roleId:e}}))}}))};fetch(t.saveUrl,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)}).then((function(t){return t.ok?t.json():t.json().then((function(t){throw t}))})).then((function(e){t.id=e.id,t.originalTitle=e.title,piranha.notifications.push({body:"The workflow has been saved",type:"success",hide:!0}),t.loading=!1,i.id||(window.location=piranha.baseUrl+"manager/workflow/edit/"+e.id)})).catch((function(e){console.log("Error saving workflow:",e),piranha.notifications.push({body:e.body||"An error occurred while saving the workflow",type:"danger",hide:!0}),t.loading=!1}))}else piranha.notifications.push({body:"Please add at least one stage to the workflow",type:"danger",hide:!0});else piranha.notifications.push({body:"Please enter a title for the workflow",type:"danger",hide:!0})},addStage:function(){this.stages.push({id:piranha.utils.generateId(),title:"",description:"",roleIds:[]})},removeStage:function(t){this.stages.splice(t,1)},moveStageUp:function(t){if(t>0){const e=this.stages[t];this.stages.splice(t,1),this.stages.splice(t-1,0,e)}},moveStageDown:function(t){if(t<this.stages.length-1){const e=this.stages[t];this.stages.splice(t,1),this.stages.splice(t+1,0,e)}},updateStageRoles:function(t,e){},toggleStageRole:function(t,e,i){if(t.roleIds||(t.roleIds=[]),i.target.checked)t.roleIds.includes(e)||t.roleIds.push(e);else{const i=t.roleIds.indexOf(e);i>-1&&t.roleIds.splice(i,1)}},loadRoles:function(){var t=this;fetch(this.rolesUrl).then((function(t){if(!t.ok)throw new Error("Failed to load roles");return t.json()})).then((function(e){t.availableRoles=e})).catch((function(t){console.log("Error loading roles:",t),piranha.notifications.push({body:"Failed to load available roles",type:"warning",hide:!0})}))}},created:function(){piranha.utils||(piranha.utils={generateId:function(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}})},mounted:function(){this.loadRoles()},updated:function(){if(!this.loading){var t=this;sortable(".sortable",{handle:".handle",items:".sortable-item",placeholderClass:"sortable-placeholder"}),document.querySelector(".sortable").addEventListener("sortupdate",(function(e){var i=e.detail.origin.index,n=e.detail.destination.index;if(i!==n){var s=t.stages.splice(i,1)[0];t.stages.splice(n,0,s)}}));for(var e=document.querySelectorAll(".sortable-item"),i=0;i<e.length;i++)e[i].setAttribute("data-index",i)}}}),piranha.utils||(piranha.utils={generateId:function(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)}});